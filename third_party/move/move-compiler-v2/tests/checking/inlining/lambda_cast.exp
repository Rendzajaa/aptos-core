// ---- Model Dump
module 0x12391283::M {
    use std::vector;
    private fun test_1(): u64 {
        {
          let gas_schedule_blob: vector<u8> = Vector<u8>(115, 115, 95, 112, 97, 99, 107, 101, 100, 32, 0, 0, 0, 0, 0, 0, 0);
          {
            let (v: vector<u8>, _) = Tuple(gas_schedule_blob, 0);
            {
              let accu: u64 = 0;
              {
                let (v$0$: vector<u8>) = Tuple(v);
                vector::reverse<u8>(Borrow(Mutable)(v$0$));
                loop {
                  if Not(vector::is_empty<u8>(Borrow(Immutable)(v$0$))) {
                    {
                      let e: u8 = vector::pop_back<u8>(Borrow(Mutable)(v$0$));
                      {
                        let (elem: u8) = Tuple(e);
                        accu: u64 = {
                          let (sum: u64, addend: u8) = Tuple(accu, elem);
                          Add<u64>(sum, Cast(addend))
                        }
                      };
                      Tuple()
                    }
                  } else {
                    break
                  }
                };
                Tuple()
              };
              accu
            }
          }
        }
    }
    private fun test_2(): u64 {
        {
          let gas_schedule_blob: vector<u8> = Vector<u8>(115, 115, 95, 112, 97, 99, 107, 101, 100, 32, 0, 0, 0, 0, 0, 0, 0);
          {
            let (v: vector<u8>, _) = Tuple(gas_schedule_blob, 0);
            {
              let accu: u64 = 0;
              {
                let (v$1$: vector<u8>) = Tuple(v);
                vector::reverse<u8>(Borrow(Mutable)(v$1$));
                loop {
                  if Not(vector::is_empty<u8>(Borrow(Immutable)(v$1$))) {
                    {
                      let e: u8 = vector::pop_back<u8>(Borrow(Mutable)(v$1$));
                      {
                        let (elem: u8) = Tuple(e);
                        accu: u64 = {
                          let (sum: u64, addend: u8) = Tuple(accu, elem);
                          Add<u64>(sum, Cast(addend))
                        }
                      };
                      Tuple()
                    }
                  } else {
                    break
                  }
                };
                Tuple()
              };
              accu
            }
          }
        }
    }
    spec fun $test_1(): u64;
    spec fun $test_2(): u64;
} // end 0x12391283::M
