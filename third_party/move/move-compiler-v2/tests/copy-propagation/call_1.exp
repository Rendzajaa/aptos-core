
Diagnostics:
warning: Unused local variable `a`. Consider removing or prefixing with an underscore: `_a`
  ┌─ tests/copy-propagation/call_1.move:7:13
  │
7 │         let a = p;
  │             ^

============ initial bytecode ================

[variant baseline]
fun m::id($t0: u64): u64 {
     var $t1: u64
  0: $t1 := infer($t0)
  1: return $t1
}


[variant baseline]
fun m::test($t0: u64): u64 {
     var $t1: u64
     var $t2: u64
     var $t3: u64
     var $t4: u64
     var $t5: u64
  0: $t2 := infer($t0)
  1: $t3 := infer($t2)
  2: $t5 := m::id($t3)
  3: $t4 := m::id($t5)
  4: $t1 := m::id($t4)
  5: return $t1
}

============ after AvailableCopiesAnalysisProcessor: ================

[variant baseline]
fun m::id($t0: u64): u64 {
     var $t1: u64
     # before: {}, after: {$t1 := $t0}
  0: $t1 := infer($t0)
     # before: {$t1 := $t0}, after: {$t1 := $t0}
  1: return $t1
}


[variant baseline]
fun m::test($t0: u64): u64 {
     var $t1: u64
     var $t2: u64
     var $t3: u64
     var $t4: u64
     var $t5: u64
     # before: {}, after: {$t2 := $t0}
  0: $t2 := infer($t0)
     # before: {$t2 := $t0}, after: {$t2 := $t0, $t3 := $t2}
  1: $t3 := infer($t2)
     # before: {$t2 := $t0, $t3 := $t2}, after: {$t2 := $t0, $t3 := $t2}
  2: $t5 := m::id($t3)
     # before: {$t2 := $t0, $t3 := $t2}, after: {$t2 := $t0, $t3 := $t2}
  3: $t4 := m::id($t5)
     # before: {$t2 := $t0, $t3 := $t2}, after: {$t2 := $t0, $t3 := $t2}
  4: $t1 := m::id($t4)
     # before: {$t2 := $t0, $t3 := $t2}, after: {$t2 := $t0, $t3 := $t2}
  5: return $t1
}

============ after CopyPropagation: ================

[variant baseline]
fun m::id($t0: u64): u64 {
     var $t1: u64
  0: $t1 := infer($t0)
  1: return $t0
}


[variant baseline]
fun m::test($t0: u64): u64 {
     var $t1: u64
     var $t2: u64
     var $t3: u64
     var $t4: u64
     var $t5: u64
  0: $t2 := infer($t0)
  1: $t3 := infer($t0)
  2: $t5 := m::id($t0)
  3: $t4 := m::id($t5)
  4: $t1 := m::id($t4)
  5: return $t1
}

============ after DeadStoreElimination: ================

[variant baseline]
fun m::id($t0: u64): u64 {
     var $t1: u64
  0: return $t0
}


[variant baseline]
fun m::test($t0: u64): u64 {
     var $t1: u64
     var $t2: u64
     var $t3: u64
     var $t4: u64
     var $t5: u64
  0: $t5 := m::id($t0)
  1: $t4 := m::id($t5)
  2: $t1 := m::id($t4)
  3: return $t1
}
