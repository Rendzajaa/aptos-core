============ initial bytecode ================

[variant baseline]
fun <SELF>_0::main() {
     var $t0: u64
     var $t1: bool
     var $t2: u64
     var $t3: u64
  0: $t2 := 100
  1: $t1 := ==($t0, $t2)
  2: if ($t1) goto 3 else goto 5
  3: label L0
  4: goto 8
  5: label L1
  6: $t3 := 42
  7: abort($t3)
  8: label L2
  9: return ()
}


Diagnostics:
error: use of unassigned local `x`
  ┌─ tests/uninit-use-checker/v1-commands/assign_wrong_if_branch.move:5:13
  │
5 │     assert!(x == 100, 42);
  │             ^^^^^^^^

============ after uninitialized_use_checker: ================

[variant baseline]
fun <SELF>_0::main() {
     var $t0: u64
     var $t1: bool
     var $t2: u64
     var $t3: u64
     # before: { no: $t0, $t1, $t2, $t3 }, after: { no: $t0, $t1, $t3 }
  0: $t2 := 100
     # before: { no: $t0, $t1, $t3 }, after: { no: $t0, $t3 }
  1: $t1 := ==($t0, $t2)
     # before: { no: $t0, $t3 }, after: { no: $t0, $t3 }
  2: if ($t1) goto 3 else goto 5
     # before: { no: $t0, $t3 }, after: { no: $t0, $t3 }
  3: label L0
     # before: { no: $t0, $t3 }, after: { no: $t0, $t3 }
  4: goto 8
     # before: { no: $t0, $t3 }, after: { no: $t0, $t3 }
  5: label L1
     # before: { no: $t0, $t3 }, after: { no: $t0 }
  6: $t3 := 42
     # before: { no: $t0 }, after: { no: $t0 }
  7: abort($t3)
     # before: { no: $t0, $t3 }, after: { no: $t0, $t3 }
  8: label L2
     # before: { no: $t0, $t3 }, after: { no: $t0, $t3 }
  9: return ()
}
