============ initial bytecode ================

[variant baseline]
fun Test::test0() {
  0: label L0
  1: goto 0
  2: label L1
  3: return ()
}


[variant baseline]
fun Test::test1() {
  0: label L0
  1: goto 0
  2: label L1
  3: return ()
}


[variant baseline]
fun Test::test2($t0: bool) {
     var $t1: u64
  0: if ($t0) goto 1 else goto 6
  1: label L0
  2: label L3
  3: goto 2
  4: label L4
  5: goto 9
  6: label L1
  7: $t1 := 42
  8: abort($t1)
  9: label L2
 10: return ()
}

============ after LiveVarAnalysisProcessor: ================

[variant baseline]
fun Test::test0() {
     # live vars:
  0: label L0
     # live vars:
  1: goto 0
     # live vars:
  2: label L1
     # live vars:
  3: return ()
}


[variant baseline]
fun Test::test1() {
     # live vars:
  0: label L0
     # live vars:
  1: goto 0
     # live vars:
  2: label L1
     # live vars:
  3: return ()
}


[variant baseline]
fun Test::test2($t0: bool) {
     var $t1: u64
     # live vars: $t0
  0: if ($t0) goto 1 else goto 6
     # live vars:
  1: label L0
     # live vars:
  2: label L3
     # live vars:
  3: goto 2
     # live vars:
  4: label L4
     # live vars:
  5: goto 9
     # live vars:
  6: label L1
     # live vars:
  7: $t1 := 42
     # live vars: $t1
  8: abort($t1)
     # live vars:
  9: label L2
     # live vars:
 10: return ()
}

============ after MemorySafetyProcessor: ================

[variant baseline]
fun Test::test0() {
     # live vars:
     # graph: {}
     # local_to_label: {}
     # global_to_label: {}
     # moved: {}
     #
  0: label L0
     # live vars:
     # graph: {}
     # local_to_label: {}
     # global_to_label: {}
     # moved: {}
     #
  1: goto 0
     # live vars:
     # graph: {}
     # local_to_label: {}
     # global_to_label: {}
     # moved: {}
     #
  2: label L1
     # live vars:
     # graph: {}
     # local_to_label: {}
     # global_to_label: {}
     # moved: {}
     #
  3: return ()
}


[variant baseline]
fun Test::test1() {
     # live vars:
     # graph: {}
     # local_to_label: {}
     # global_to_label: {}
     # moved: {}
     #
  0: label L0
     # live vars:
     # graph: {}
     # local_to_label: {}
     # global_to_label: {}
     # moved: {}
     #
  1: goto 0
     # live vars:
     # graph: {}
     # local_to_label: {}
     # global_to_label: {}
     # moved: {}
     #
  2: label L1
     # live vars:
     # graph: {}
     # local_to_label: {}
     # global_to_label: {}
     # moved: {}
     #
  3: return ()
}


[variant baseline]
fun Test::test2($t0: bool) {
     var $t1: u64
     # live vars: $t0
     # graph: {}
     # local_to_label: {}
     # global_to_label: {}
     # moved: {}
     #
  0: if ($t0) goto 1 else goto 6
     # live vars:
     # graph: {}
     # local_to_label: {}
     # global_to_label: {}
     # moved: {}
     #
  1: label L0
     # live vars:
     # graph: {}
     # local_to_label: {}
     # global_to_label: {}
     # moved: {}
     #
  2: label L3
     # live vars:
     # graph: {}
     # local_to_label: {}
     # global_to_label: {}
     # moved: {}
     #
  3: goto 2
     # live vars:
     # graph: {}
     # local_to_label: {}
     # global_to_label: {}
     # moved: {}
     #
  4: label L4
     # live vars:
     # graph: {}
     # local_to_label: {}
     # global_to_label: {}
     # moved: {}
     #
  5: goto 9
     # live vars:
     # graph: {}
     # local_to_label: {}
     # global_to_label: {}
     # moved: {}
     #
  6: label L1
     # live vars:
     # graph: {}
     # local_to_label: {}
     # global_to_label: {}
     # moved: {}
     #
  7: $t1 := 42
     # live vars: $t1
     # graph: {}
     # local_to_label: {}
     # global_to_label: {}
     # moved: {}
     #
  8: abort($t1)
     # live vars:
     # graph: {}
     # local_to_label: {}
     # global_to_label: {}
     # moved: {}
     #
  9: label L2
     # live vars:
     # graph: {}
     # local_to_label: {}
     # global_to_label: {}
     # moved: {}
     #
 10: return ()
}

============ after ExplicitDrop: ================

[variant baseline]
fun Test::test0() {
  0: label L0
  1: goto 0
  2: label L1
  3: return ()
}


[variant baseline]
fun Test::test1() {
  0: label L0
  1: goto 0
  2: label L1
  3: return ()
}


[variant baseline]
fun Test::test2($t0: bool) {
     var $t1: u64
  0: if ($t0) goto 1 else goto 6
  1: label L0
  2: label L3
  3: goto 2
  4: label L4
  5: goto 9
  6: label L1
  7: $t1 := 42
  8: abort($t1)
  9: label L2
 10: return ()
}

============ after AbortAnalysisProcessor: ================

[variant baseline]
fun Test::test0() {
     # abort state before: {}
     # abort state after : {}
  0: label L0
     # abort state before: {}
     # abort state after : {}
  1: goto 0
     # abort state before: {returns}
     # abort state after : {returns}
  2: label L1
     # abort state before: {returns}
     # abort state after : {}
  3: return ()
}


[variant baseline]
fun Test::test1() {
     # abort state before: {}
     # abort state after : {}
  0: label L0
     # abort state before: {}
     # abort state after : {}
  1: goto 0
     # abort state before: {returns}
     # abort state after : {returns}
  2: label L1
     # abort state before: {returns}
     # abort state after : {}
  3: return ()
}


[variant baseline]
fun Test::test2($t0: bool) {
     var $t1: u64
     # abort state before: {aborts}
     # abort state after : {aborts}
  0: if ($t0) goto 1 else goto 6
     # abort state before: {}
     # abort state after : {}
  1: label L0
     # abort state before: {}
     # abort state after : {}
  2: label L3
     # abort state before: {}
     # abort state after : {}
  3: goto 2
     # abort state before: {returns}
     # abort state after : {returns}
  4: label L4
     # abort state before: {returns}
     # abort state after : {returns}
  5: goto 9
     # abort state before: {aborts}
     # abort state after : {aborts}
  6: label L1
     # abort state before: {aborts}
     # abort state after : {aborts}
  7: $t1 := 42
     # abort state before: {aborts}
     # abort state after : {}
  8: abort($t1)
     # abort state before: {returns}
     # abort state after : {returns}
  9: label L2
     # abort state before: {returns}
     # abort state after : {}
 10: return ()
}

============ after AbilityChecker: ================

[variant baseline]
fun Test::test0() {
     # abort state before: {}
     # abort state after : {}
  0: label L0
     # abort state before: {}
     # abort state after : {}
  1: goto 0
     # abort state before: {returns}
     # abort state after : {returns}
  2: label L1
     # abort state before: {returns}
     # abort state after : {}
  3: return ()
}


[variant baseline]
fun Test::test1() {
     # abort state before: {}
     # abort state after : {}
  0: label L0
     # abort state before: {}
     # abort state after : {}
  1: goto 0
     # abort state before: {returns}
     # abort state after : {returns}
  2: label L1
     # abort state before: {returns}
     # abort state after : {}
  3: return ()
}


[variant baseline]
fun Test::test2($t0: bool) {
     var $t1: u64
     # abort state before: {aborts}
     # abort state after : {aborts}
  0: if ($t0) goto 1 else goto 6
     # abort state before: {}
     # abort state after : {}
  1: label L0
     # abort state before: {}
     # abort state after : {}
  2: label L3
     # abort state before: {}
     # abort state after : {}
  3: goto 2
     # abort state before: {returns}
     # abort state after : {returns}
  4: label L4
     # abort state before: {returns}
     # abort state after : {returns}
  5: goto 9
     # abort state before: {aborts}
     # abort state after : {aborts}
  6: label L1
     # abort state before: {aborts}
     # abort state after : {aborts}
  7: $t1 := 42
     # abort state before: {aborts}
     # abort state after : {}
  8: abort($t1)
     # abort state before: {returns}
     # abort state after : {returns}
  9: label L2
     # abort state before: {returns}
     # abort state after : {}
 10: return ()
}
